# 46. Permutations
Given a collection of distinct integers, return all possible permutations.

Example:
```
Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]
```

## Solution 1
Use DP thought, for example input is [1,2,3]. When only has one element(1), we can get permutate [[1]]. When add the second element(2), we can add it before 1 and after 1, which makes [[2,1], [1,2]]. When add the third element(3), we can do (_ represents the slot we can insert number 3):
_1_2_: [3,1,2], [1,3,2], [1,2,3]
_2_1_: [3,2,1], [2,3,1], [2,1,3]
etc etc...
```
var permute = function(nums) {
    function genPermute(arr, num) {
        let result = [];
        arr.forEach(subarr => {
            for (let i = 0; i <= subarr.length; i++) {
                subarr.splice(i, 0, num);
                result.push([...subarr]);
                subarr.splice(i,1);
            }
        });
        return result;
    }
    
    if (!nums || !nums.length)   return [[]];
    let prev = [[nums[0]]];
    for (let i = 1; i < nums.length; i++) {
        num = nums[i];
        let curr = genPermute(prev, num);
        prev = curr;
    }
    return prev;
};
```

## JavaScript [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)
#### [Array.splice](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice)
- array.splice(start[, deleteCount[, item1[, item2[, ...]]]]), return an array containing the deleted elements. 
#### [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)
- arr.forEach(function callback(currentValue[, index[, array]]) {//your iterator}[, thisArg]);
