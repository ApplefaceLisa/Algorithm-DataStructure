# [22. Generate Parentheses](https://leetcode.com/problems/generate-parentheses/description/)
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:
```
[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]
```

## Solution 1: Add "()" after each "(", then add "()" before whole string.
```
var generateParenthesis = function(n) {
    let result = new Set(["()"]);
    for (let i = 2; i <= n; i++) {
        let curr = new Set();
        result.forEach((str)=>{
            for (let i = 0; i < str.length; i++) {
                if (str.charAt(i) === '(') {
                    curr.add(str.slice(0, i+1)+'()'+str.slice(i+1));
                }
            }
            curr.add('()'+str);
        });
        result = curr;
    }
    return Array.from(result);
};
```

## Solution 2: backtracking
```
var generateParenthesis = function(n) {
  let res = [];
  backtrack(n, n, '', res);
  return res;
};

function backtrack(left, right, current, res) {
  if (left > right) return;

  if (!left && ! right) return res.push(current);

  if (left) backtrack(left - 1, right, current + "(", res);
  if (right) backtrack(left, right - 1, current + ")", res);
}
```
